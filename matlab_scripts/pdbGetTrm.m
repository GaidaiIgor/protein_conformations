function torsmodel = pdbGetTrm(pdbStruct)
%PDBGETTRM Creates a transformation model
%   pdbGetTrm(pdbStruct) creates a transformation
%   model from unimodal PDB structure.
%
%   There are two model types. For the first type model rotations and
%   translations to fit configurations are calculated at every step. For
%   the second type model the rotations and translations are calculated
%   once during the model creation. By default it is considered that the
%   model belongs to the first type.
%
% Protein Transformation Toolbox for MATLAB

% By Sergey Knyazev, 2012.
% sergey.n.knyazev@gmail.com

startPdbStruct = pdbStruct; startPdbStruct.Model = pdbStruct.Model(1);
finishPdbStruct = pdbStruct; finishPdbStruct.Model = pdbStruct.Model(end);

torsmodel = struct('m', atomicmass({startPdbStruct.Model.Atom.element}),...
    'StartCoords', atomiccoords(startPdbStruct), ...
    'FinishCoords', atomiccoords(finishPdbStruct));

% Calculate bond lengths and planar angles of a configuration.
deltax=cell2struct(arrayfun(@(x) ...
    diff(x.frame) ...
    , atomiccoords1(pdbStruct) , 'uniformout',false),'frame',1)';
torsmodel.r = cell2mat(arrayfun(@(dx) ...
    sqrt(sum(dx.frame.^2, 2))  ...
    , deltax, 'uniformout',false));
torsmodel.alpha = cell2mat(arrayfun(@(dx, r1) ...
    acos(dot(dx.frame(1:end-1,:), dx.frame(2:end,:), 2) ./ ...
    (r1.frame(1:end-1,1) .* r1.frame(2:end,1))) ...
    , deltax, cell2struct( ...
   mat2cell(torsmodel.r,size(torsmodel.r,1),ones(1,size(torsmodel.r,2)))...
    , 'frame', 1)', 'uniformout', false));
        
% Calculate torsion angles of a configuration.
N = cell2struct( ...
    arrayfun(@(dx)...
cross(dx.frame(1:end-1,:), dx.frame(2:end,:), 2)...
, deltax, 'uniformout', false)...
, 'frame', 1)';
torsmodel.psi = cell2mat(arrayfun(@(dx, r1, N1) ...
    -atan2(r1.frame(2:end-1,:) .* ...
    dot(dx.frame(1:end-2,:), N1.frame(2:end,:), 2), ...
    dot(N1.frame(1:end-1,:), N1.frame(2:end,:), 2)) ...
    , deltax, cell2struct( ...
   mat2cell(torsmodel.r,size(torsmodel.r,1),ones(1,size(torsmodel.r,2)))...
   , 'frame', 1)', N, 'uniformout', false));
torsmodel.type  = 1;

end

function coords = atomiccoords(PDBStruct)
    coords = [[PDBStruct.Model.Atom.X]' [PDBStruct.Model.Atom.Y]' ...
        [PDBStruct.Model.Atom.Z]'];
end

function coords = atomiccoords1(pdbStruct)
    coords = cell2struct(arrayfun(@(model)[[model.Atom.X]' ...
        [model.Atom.Y]' [model.Atom.Z]'] ...
        , pdbStruct.Model, 'uniformoutput', false), 'frame', 1)';
end